1. Install NodeJS
-verify with '$node -v'

2. Setup npm for this project
- run '$npm init' from project dir and answer the default on all questions
- creates file package.json

3. Install Express
- run '$npm install express --save'

4. Create app.js
add:
var express = require('express');
var app = express();
var port = 5000;
app.listen(port, function(err){
    console.log('running server on port ' + port);
});

5. Start your app
- run '$node app.js'
- Your application is up and running but it doesn't do anything

6. Add start script to package.json
- in "scripts" add '"start": "node app.js"'
- this enables you to start your application with 'npm start'

7. Add a route to app.js
app.get('/', function(req, res){
    res.send('Hello world');
});

8. Find a boostrap template that you like.
- Download and extract the zip
- create a folder 'public' and copy the css and js directories from the bootstrap theme into that folder
- create the folder structure 'src/views' and put the index.html in there

9. Make public a static directory
This is so that we don't have to create routes for all css and js-files.
add:
'app.use(express.static('public'));'
'app.use(express.static('src/views'));'
to app.js

10. Install Bower
We want to use the latest versions of bootstrap, jquery, and font awesome.
This is done with Bower, which is a package manager for the front end web
- run '$npm install bower -g'
- the -g installs bower globally so that we can execute it from the commande line.

11. Initiate bower
- run '$bower init' and answer the default on all questions

12. Create .bowerrc
Configuration file for bower
We want bower to install the files to our static directory 'public'
add:
{
    "directory": "public/lib"
}

13. Install boostrap with Bower
- run '$bower install --save bootstrap'

14. Replace the boostrap refs in index.html to use the versions installed with Bower
Replace
<link href="css/bootstrap.min.css" rel="stylesheet">
to
<link href="lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">

<script src="js/bootstrap.min.js"></script>
to
<script src="lib/bootstrap/dist/js/bootstrap.min.js"></script>

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js"></script>
to
<script src="lib/jquery/dist/jquery.min.js"></script>

15. Install font-awesome with Bower
- run '$bower install --save font-awesome'

16. Update index.html to use font-awesome installed with Bower
Replace
<link href="//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.min.css" rel="stylesheet">
with
<link href="lib/font-awesome/css/font-awesome.min.css" rel="stylesheet">

17. Gulp - a task manager for web projects
# Installed with NPM, Easy to use, Code based configuration, Package based
Install Gulp
$npm install -g gulp
Gulp needs to be installed locally as well:
$npm install gulp --save-dev

18. JSHint and JSCS
# JSHint - Code Quality - Detects potential errors, enforces coding conventions, easily configurable and open source
# JSCS - Code Style - Enforces style conventions, easily configurable and open source
Install JSHint and JSCS:
$npm install --save-dev jshint gulp-jshint gulp-jscs jshint-stylish
Download .jshintrc and .jssrc from https://github.com/jonathanfmills/CodingStandards and copy them to the root of your project
Activate the built-in jshint and jscs in intellij

19. Create gulpfile.js
Put this in gulpfile.js
var gulp = require('gulp');
var jshint = require('gulp-jshint');
var jscs = require('gulp-jscs');

var jsFiles = ['*.js', 'src/**/*.js'];

gulp.task('style', function() {
    return gulp.src(jsFiles)
        .pipe(jshint())
        .pipe(jshint.reporter('jshint-stylish', {
            verbose: true
        }))
        .pipe(jscs());
});
and then run:
$gulp style

20. Wiredep
# Wiredep is used to inject your javascript and css files into your html files
- run:
$npm install --save-dev wiredep
- add the inject task to gulpfile.js

21. Inject the js and css files into the html with gulp
- Remove the javascript files in index.html that are coming from components installed with bower
- To have the css files added with wiredep you need to add the "overrides" in bower.json
- Add bower:js and bower:css to your index.html file where you want to inject the files
- run:
$gulp inject

21. Gulp inject
# Injects my css and js-files into html-files
- run:
$npm install --save-dev gulp-inject

22. Update the gulp inject task
- Update gulpfile.js
- add inject:css and inject:js to index.html and remove the js and css imports

23. Install nodemon
# a tool that automatically restarts your application when files are being updated
- run:
$npm install --save-dev gulp-nodemon

24. Update gulpfile.js with a new task
Updated with a new task that uses nodemon to run the app.
To run the app with nodemon use:
$gulp serve

25. Templating engine - EJS
Install with:
$npm install --save ejs

26. Using ejs
Update app.js and rename index.html to index.ejs

27. Switch to Brackets
Instead of using Atom as editor I have now switched to Brackets. It is a much better editor.
I have installed the plugins listed in the screenshots 'BracketsPluginsX' in the documentation folder. 



Notes:
I should be able to install angular with Bower
Probably it is better to use jquery with templating engines
